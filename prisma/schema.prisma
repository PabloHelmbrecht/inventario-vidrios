generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Glass {
  id             Int             @id @default(autoincrement())
  typeId         Int?
  status         GlassStatus
  quantity       Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  locationId     Int?
  width          Int
  height         Int
  vendorId       Int?
  batch          String?
  expirationDate DateTime?
  Comment        String?
  type           GlassType?      @relation(fields: [typeId], references: [id])
  location       GlassLocation?  @relation(fields: [locationId], references: [id])
  vendor         GlassVendor?    @relation(fields: [vendorId], references: [id])
  GlassMovement  GlassMovement[]

  @@index([typeId])
  @@index([locationId])
  @@index([vendorId])
}

model GlassMovement {
  id        Int      @id @default(autoincrement())
  glassId   Int
  column    String
  oldValue  String?
  newValue  String
  updatedAt DateTime @default(now())
  userId    String?
  glass     Glass    @relation(fields: [glassId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([glassId])
  @@index([userId])
}

model GlassType {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Glass       Glass[]
}

model GlassLocation {
  id        Int      @id @default(autoincrement())
  position  String
  warehouse String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Glass     Glass[]
}

model GlassVendor {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Glass     Glass[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  GlassMovement GlassMovement[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum GlassStatus {
  TRANSIT
  STORED
  CONSUMED
}

enum Role {
  USER
  ADMIN
  VIEWER
}
